/*
 * Rumble API
 *
 * Rumble Network Discovery API
 *
 * API version: 1.0.0
 * Contact: support@rumble.run
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"bytes"
	"encoding/json"
)

// Site struct for Site
type Site struct {
	Id          string   `json:"id"`
	CreatedAt   *float32 `json:"created_at,omitempty"`
	UpdatedAt   *float32 `json:"updated_at,omitempty"`
	Permanent   *bool    `json:"permanent,omitempty"`
	Name        string   `json:"name"`
	Description *string  `json:"description,omitempty"`
	Scope       *string  `json:"scope,omitempty"`
	Excludes    *string  `json:"excludes,omitempty"`
}

// GetId returns the Id field value
func (o *Site) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// SetId sets field value
func (o *Site) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Site) GetCreatedAt() float32 {
	if o == nil || o.CreatedAt == nil {
		var ret float32
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Site) GetCreatedAtOk() (float32, bool) {
	if o == nil || o.CreatedAt == nil {
		var ret float32
		return ret, false
	}
	return *o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Site) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given float32 and assigns it to the CreatedAt field.
func (o *Site) SetCreatedAt(v float32) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Site) GetUpdatedAt() float32 {
	if o == nil || o.UpdatedAt == nil {
		var ret float32
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Site) GetUpdatedAtOk() (float32, bool) {
	if o == nil || o.UpdatedAt == nil {
		var ret float32
		return ret, false
	}
	return *o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Site) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given float32 and assigns it to the UpdatedAt field.
func (o *Site) SetUpdatedAt(v float32) {
	o.UpdatedAt = &v
}

// GetPermanent returns the Permanent field value if set, zero value otherwise.
func (o *Site) GetPermanent() bool {
	if o == nil || o.Permanent == nil {
		var ret bool
		return ret
	}
	return *o.Permanent
}

// GetPermanentOk returns a tuple with the Permanent field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Site) GetPermanentOk() (bool, bool) {
	if o == nil || o.Permanent == nil {
		var ret bool
		return ret, false
	}
	return *o.Permanent, true
}

// HasPermanent returns a boolean if a field has been set.
func (o *Site) HasPermanent() bool {
	if o != nil && o.Permanent != nil {
		return true
	}

	return false
}

// SetPermanent gets a reference to the given bool and assigns it to the Permanent field.
func (o *Site) SetPermanent(v bool) {
	o.Permanent = &v
}

// GetName returns the Name field value
func (o *Site) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// SetName sets field value
func (o *Site) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Site) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Site) GetDescriptionOk() (string, bool) {
	if o == nil || o.Description == nil {
		var ret string
		return ret, false
	}
	return *o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Site) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Site) SetDescription(v string) {
	o.Description = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *Site) GetScope() string {
	if o == nil || o.Scope == nil {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Site) GetScopeOk() (string, bool) {
	if o == nil || o.Scope == nil {
		var ret string
		return ret, false
	}
	return *o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *Site) HasScope() bool {
	if o != nil && o.Scope != nil {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *Site) SetScope(v string) {
	o.Scope = &v
}

// GetExcludes returns the Excludes field value if set, zero value otherwise.
func (o *Site) GetExcludes() string {
	if o == nil || o.Excludes == nil {
		var ret string
		return ret
	}
	return *o.Excludes
}

// GetExcludesOk returns a tuple with the Excludes field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Site) GetExcludesOk() (string, bool) {
	if o == nil || o.Excludes == nil {
		var ret string
		return ret, false
	}
	return *o.Excludes, true
}

// HasExcludes returns a boolean if a field has been set.
func (o *Site) HasExcludes() bool {
	if o != nil && o.Excludes != nil {
		return true
	}

	return false
}

// SetExcludes gets a reference to the given string and assigns it to the Excludes field.
func (o *Site) SetExcludes(v string) {
	o.Excludes = &v
}

type NullableSite struct {
	Value        Site
	ExplicitNull bool
}

func (v NullableSite) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableSite) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
