/*
 * Rumble API
 *
 * Rumble Network Discovery API
 *
 * API version: 1.0.0
 * Contact: support@rumble.run
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"bytes"
	"encoding/json"
)

// ApiKey struct for ApiKey
type ApiKey struct {
	Id             string   `json:"id"`
	ClientId       *string  `json:"client_id,omitempty"`
	OrganizationId *string  `json:"organization_id,omitempty"`
	CreatedAt      *float32 `json:"created_at,omitempty"`
	CreatedBy      *string  `json:"created_by,omitempty"`
	Comment        *string  `json:"comment,omitempty"`
	LastUsedAt     *float32 `json:"last_used_at,omitempty"`
	LastUsedIp     *string  `json:"last_used_ip,omitempty"`
	LastUsedUa     *string  `json:"last_used_ua,omitempty"`
	Counter        *float32 `json:"counter,omitempty"`
	UsageToday     *float32 `json:"usage_today,omitempty"`
	UsageLimit     *float32 `json:"usage_limit,omitempty"`
	Token          *string  `json:"token,omitempty"`
	Inactive       *bool    `json:"inactive,omitempty"`
}

// GetId returns the Id field value
func (o *ApiKey) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// SetId sets field value
func (o *ApiKey) SetId(v string) {
	o.Id = v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *ApiKey) GetClientId() string {
	if o == nil || o.ClientId == nil {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetClientIdOk() (string, bool) {
	if o == nil || o.ClientId == nil {
		var ret string
		return ret, false
	}
	return *o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *ApiKey) HasClientId() bool {
	if o != nil && o.ClientId != nil {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *ApiKey) SetClientId(v string) {
	o.ClientId = &v
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *ApiKey) GetOrganizationId() string {
	if o == nil || o.OrganizationId == nil {
		var ret string
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetOrganizationIdOk() (string, bool) {
	if o == nil || o.OrganizationId == nil {
		var ret string
		return ret, false
	}
	return *o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *ApiKey) HasOrganizationId() bool {
	if o != nil && o.OrganizationId != nil {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given string and assigns it to the OrganizationId field.
func (o *ApiKey) SetOrganizationId(v string) {
	o.OrganizationId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ApiKey) GetCreatedAt() float32 {
	if o == nil || o.CreatedAt == nil {
		var ret float32
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetCreatedAtOk() (float32, bool) {
	if o == nil || o.CreatedAt == nil {
		var ret float32
		return ret, false
	}
	return *o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ApiKey) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given float32 and assigns it to the CreatedAt field.
func (o *ApiKey) SetCreatedAt(v float32) {
	o.CreatedAt = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *ApiKey) GetCreatedBy() string {
	if o == nil || o.CreatedBy == nil {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetCreatedByOk() (string, bool) {
	if o == nil || o.CreatedBy == nil {
		var ret string
		return ret, false
	}
	return *o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *ApiKey) HasCreatedBy() bool {
	if o != nil && o.CreatedBy != nil {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *ApiKey) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *ApiKey) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetCommentOk() (string, bool) {
	if o == nil || o.Comment == nil {
		var ret string
		return ret, false
	}
	return *o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *ApiKey) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *ApiKey) SetComment(v string) {
	o.Comment = &v
}

// GetLastUsedAt returns the LastUsedAt field value if set, zero value otherwise.
func (o *ApiKey) GetLastUsedAt() float32 {
	if o == nil || o.LastUsedAt == nil {
		var ret float32
		return ret
	}
	return *o.LastUsedAt
}

// GetLastUsedAtOk returns a tuple with the LastUsedAt field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetLastUsedAtOk() (float32, bool) {
	if o == nil || o.LastUsedAt == nil {
		var ret float32
		return ret, false
	}
	return *o.LastUsedAt, true
}

// HasLastUsedAt returns a boolean if a field has been set.
func (o *ApiKey) HasLastUsedAt() bool {
	if o != nil && o.LastUsedAt != nil {
		return true
	}

	return false
}

// SetLastUsedAt gets a reference to the given float32 and assigns it to the LastUsedAt field.
func (o *ApiKey) SetLastUsedAt(v float32) {
	o.LastUsedAt = &v
}

// GetLastUsedIp returns the LastUsedIp field value if set, zero value otherwise.
func (o *ApiKey) GetLastUsedIp() string {
	if o == nil || o.LastUsedIp == nil {
		var ret string
		return ret
	}
	return *o.LastUsedIp
}

// GetLastUsedIpOk returns a tuple with the LastUsedIp field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetLastUsedIpOk() (string, bool) {
	if o == nil || o.LastUsedIp == nil {
		var ret string
		return ret, false
	}
	return *o.LastUsedIp, true
}

// HasLastUsedIp returns a boolean if a field has been set.
func (o *ApiKey) HasLastUsedIp() bool {
	if o != nil && o.LastUsedIp != nil {
		return true
	}

	return false
}

// SetLastUsedIp gets a reference to the given string and assigns it to the LastUsedIp field.
func (o *ApiKey) SetLastUsedIp(v string) {
	o.LastUsedIp = &v
}

// GetLastUsedUa returns the LastUsedUa field value if set, zero value otherwise.
func (o *ApiKey) GetLastUsedUa() string {
	if o == nil || o.LastUsedUa == nil {
		var ret string
		return ret
	}
	return *o.LastUsedUa
}

// GetLastUsedUaOk returns a tuple with the LastUsedUa field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetLastUsedUaOk() (string, bool) {
	if o == nil || o.LastUsedUa == nil {
		var ret string
		return ret, false
	}
	return *o.LastUsedUa, true
}

// HasLastUsedUa returns a boolean if a field has been set.
func (o *ApiKey) HasLastUsedUa() bool {
	if o != nil && o.LastUsedUa != nil {
		return true
	}

	return false
}

// SetLastUsedUa gets a reference to the given string and assigns it to the LastUsedUa field.
func (o *ApiKey) SetLastUsedUa(v string) {
	o.LastUsedUa = &v
}

// GetCounter returns the Counter field value if set, zero value otherwise.
func (o *ApiKey) GetCounter() float32 {
	if o == nil || o.Counter == nil {
		var ret float32
		return ret
	}
	return *o.Counter
}

// GetCounterOk returns a tuple with the Counter field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetCounterOk() (float32, bool) {
	if o == nil || o.Counter == nil {
		var ret float32
		return ret, false
	}
	return *o.Counter, true
}

// HasCounter returns a boolean if a field has been set.
func (o *ApiKey) HasCounter() bool {
	if o != nil && o.Counter != nil {
		return true
	}

	return false
}

// SetCounter gets a reference to the given float32 and assigns it to the Counter field.
func (o *ApiKey) SetCounter(v float32) {
	o.Counter = &v
}

// GetUsageToday returns the UsageToday field value if set, zero value otherwise.
func (o *ApiKey) GetUsageToday() float32 {
	if o == nil || o.UsageToday == nil {
		var ret float32
		return ret
	}
	return *o.UsageToday
}

// GetUsageTodayOk returns a tuple with the UsageToday field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetUsageTodayOk() (float32, bool) {
	if o == nil || o.UsageToday == nil {
		var ret float32
		return ret, false
	}
	return *o.UsageToday, true
}

// HasUsageToday returns a boolean if a field has been set.
func (o *ApiKey) HasUsageToday() bool {
	if o != nil && o.UsageToday != nil {
		return true
	}

	return false
}

// SetUsageToday gets a reference to the given float32 and assigns it to the UsageToday field.
func (o *ApiKey) SetUsageToday(v float32) {
	o.UsageToday = &v
}

// GetUsageLimit returns the UsageLimit field value if set, zero value otherwise.
func (o *ApiKey) GetUsageLimit() float32 {
	if o == nil || o.UsageLimit == nil {
		var ret float32
		return ret
	}
	return *o.UsageLimit
}

// GetUsageLimitOk returns a tuple with the UsageLimit field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetUsageLimitOk() (float32, bool) {
	if o == nil || o.UsageLimit == nil {
		var ret float32
		return ret, false
	}
	return *o.UsageLimit, true
}

// HasUsageLimit returns a boolean if a field has been set.
func (o *ApiKey) HasUsageLimit() bool {
	if o != nil && o.UsageLimit != nil {
		return true
	}

	return false
}

// SetUsageLimit gets a reference to the given float32 and assigns it to the UsageLimit field.
func (o *ApiKey) SetUsageLimit(v float32) {
	o.UsageLimit = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *ApiKey) GetToken() string {
	if o == nil || o.Token == nil {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetTokenOk() (string, bool) {
	if o == nil || o.Token == nil {
		var ret string
		return ret, false
	}
	return *o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *ApiKey) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *ApiKey) SetToken(v string) {
	o.Token = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *ApiKey) GetInactive() bool {
	if o == nil || o.Inactive == nil {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetInactiveOk() (bool, bool) {
	if o == nil || o.Inactive == nil {
		var ret bool
		return ret, false
	}
	return *o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *ApiKey) HasInactive() bool {
	if o != nil && o.Inactive != nil {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *ApiKey) SetInactive(v bool) {
	o.Inactive = &v
}

type NullableApiKey struct {
	Value        ApiKey
	ExplicitNull bool
}

func (v NullableApiKey) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableApiKey) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
